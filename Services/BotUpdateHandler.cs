using GoodMorningBot.Data;
using GoodMorningBot.Models;
using Microsoft.EntityFrameworkCore;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace GoodMorningBot.Services
{
    public class BotUpdateHandler
    {
        private readonly ITelegramBotClient _botClient;
        private readonly BotDbContext _dbContext;

        public BotUpdateHandler(ITelegramBotClient botClient, BotDbContext dbContext)
        {
            _botClient = botClient;
            _dbContext = dbContext;
        }

        public async Task HandleUpdateAsync(Update update, CancellationToken cancellationToken)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (update.Message?.Type != MessageType.Text)
                return;

            // –ü–æ—É–ª—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            var message = update.Message;
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
            if (message.Text?.StartsWith("/start") == true)
            {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞
                var chatId = message.Chat.Id;
                // –ü–æ–∏—Å–∫, ID —á–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                var existingChat = await _dbContext.Chats.FirstOrDefaultAsync(c => c.ChatId == chatId);

                // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç
                if (existingChat == null)
                {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞
                    var chatInfo = new ChatInfo
                    {
                        ChatId = chatId, // ID —á–∞—Ç–∞ 
                        ChatTitle = message.Chat.Title ??
                                    message.Chat.Username ?? message.Chat.FirstName ?? "Unknown", // –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
                        AddedDate = DateTime.UtcNow // –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    };

                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    _dbContext.Chats.Add(chatInfo);
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    await _dbContext.SaveChangesAsync();

                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text:
                        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º ¬´–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ¬ª –∏ ¬´–î–æ–±—Ä–æ–π –Ω–æ—á–∏¬ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –∏ 21:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏. üåÖ",
                        cancellationToken: cancellationToken);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /citation
            else if (message.Text.StartsWith("/citation") == true)
            {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞
                var chatId = message.Chat.Id;

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç–æ–π
                await new CitationMessageService(_botClient, chatId)
                    .SendEveningMessagesAsync();
            }
        }

        public Task HandleErrorAsync(Exception exception, CancellationToken cancellationToken)
        {
            Console.WriteLine($"Error handling update: {exception.Message}");
            return Task.CompletedTask;
        }
    }
}